{"ast":null,"code":"var _jsxFileName = \"D:\\\\Nati\\\\Henry\\\\INTEGRADOR\\\\rickandmorty\\\\front\\\\src\\\\components\\\\Detail\\\\detail.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Detail = () => {\n  _s();\n  var _character$origin;\n  //Acá es donde guardamos detailID. useParams es un objeto que tiene como propiedad \"detailID\". Esto se lo decimos en app.js. \n  //La idea de esto es guardar todos los detalles de cada character en su propia id y no la de otro character. Por eso tenemos que guardar esta info.\n  const {\n    detailID\n  } = useParams();\n  const [character, setCharacter] = useState({});\n\n  //Siempre useEffect tiene una callback y un array\n  useEffect(() => {\n    const URL_BASE = \"https://be-a-rym.up.railway.app/api\";\n    const KEY = \"dac1f7ac8c54.6d7aadaf056f93592c47\";\n    axios(`${URL_BASE}/character/${detailID}?key=${KEY}`)\n\n    //OJO CON ESTO DE AXIOS! response.data\n    .then(response => setCharacter(response.data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: character.name ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.species\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.gender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_character$origin = character.origin) === null || _character$origin === void 0 ? void 0 : _character$origin.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: character.image,\n        alt: \"img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(Detail, \"mcLQGpVnBSIB5VxOMgcDLNjIduU=\", false, function () {\n  return [useParams];\n});\n_c = Detail;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["useEffect","useParams","axios","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Detail","_s","_character$origin","detailID","character","setCharacter","URL_BASE","KEY","then","response","data","children","name","fileName","_jsxFileName","lineNumber","columnNumber","status","species","gender","origin","src","image","alt","_c","$RefreshReg$"],"sources":["D:/Nati/Henry/INTEGRADOR/rickandmorty/front/src/components/Detail/detail.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nconst Detail = () => {\r\n\r\n    //Acá es donde guardamos detailID. useParams es un objeto que tiene como propiedad \"detailID\". Esto se lo decimos en app.js. \r\n    //La idea de esto es guardar todos los detalles de cada character en su propia id y no la de otro character. Por eso tenemos que guardar esta info.\r\n    const {detailID} = useParams();\r\n    \r\n    const [character, setCharacter] = useState({});\r\n    \r\n    //Siempre useEffect tiene una callback y un array\r\n    useEffect(() => {\r\n        const URL_BASE = \"https://be-a-rym.up.railway.app/api\";\r\n        const KEY = \"dac1f7ac8c54.6d7aadaf056f93592c47\";\r\n        axios(`${URL_BASE}/character/${detailID}?key=${KEY}`)\r\n\r\n        //OJO CON ESTO DE AXIOS! response.data\r\n        .then(response=>setCharacter(response.data));\r\n        \r\n    }, []);\r\n\r\n    return(\r\n        <div>\r\n\r\n            {/* Acá le vamos a decir lo siguiente. character.name existe? si existe, mostrame esto (y ahí la info) Si no existe, mostrame loading */}\r\n            {\r\n                character.name ?\r\n                (<>\r\n                    <h2>{character.name}</h2>\r\n                    <p>{character.status}</p>\r\n                    <p>{character.species}</p>\r\n                    <p>{character.gender}</p>\r\n                    {/* Acá le decimos que espere hasta que la info de origin esté disponible, porque a veces axios tarda mucho */}\r\n                    <p>{character.origin?.name}</p>\r\n                    <img src={character.image} alt=\"img\" />\r\n                </>)\r\n                : <h3>Loading...</h3>\r\n            }\r\n        \r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Detail;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,iBAAA;EAEjB;EACA;EACA,MAAM;IAACC;EAAQ,CAAC,GAAGV,SAAS,EAAE;EAE9B,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE9C;EACAH,SAAS,CAAC,MAAM;IACZ,MAAMc,QAAQ,GAAG,qCAAqC;IACtD,MAAMC,GAAG,GAAG,mCAAmC;IAC/Cb,KAAK,CAAE,GAAEY,QAAS,cAAaH,QAAS,QAAOI,GAAI,EAAC;;IAEpD;IAAA,CACCC,IAAI,CAACC,QAAQ,IAAEJ,YAAY,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC;EAEhD,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIb,OAAA;IAAAc,QAAA,EAIQP,SAAS,CAACQ,IAAI,gBACbf,OAAA,CAAAE,SAAA;MAAAY,QAAA,gBACGd,OAAA;QAAAc,QAAA,EAAKP,SAAS,CAACQ;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACzBnB,OAAA;QAAAc,QAAA,EAAIP,SAAS,CAACa;MAAM;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACzBnB,OAAA;QAAAc,QAAA,EAAIP,SAAS,CAACc;MAAO;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC1BnB,OAAA;QAAAc,QAAA,EAAIP,SAAS,CAACe;MAAM;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAEzBnB,OAAA;QAAAc,QAAA,GAAAT,iBAAA,GAAIE,SAAS,CAACgB,MAAM,cAAAlB,iBAAA,uBAAhBA,iBAAA,CAAkBU;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC/BnB,OAAA;QAAKwB,GAAG,EAAEjB,SAAS,CAACkB,KAAM;QAACC,GAAG,EAAC;MAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA,gBACxC,gBACDnB,OAAA;MAAAc,QAAA,EAAI;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAK;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAIvB;AAEd,CAAC;AAACf,EAAA,CAxCID,MAAM;EAAA,QAIWP,SAAS;AAAA;AAAA+B,EAAA,GAJ1BxB,MAAM;AA0CZ,eAAeA,MAAM;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}